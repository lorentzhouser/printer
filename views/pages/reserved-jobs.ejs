<%- partial('../components/navbar.ejs') %>
<!-- <script src="https://unpkg.com/axios/dist/axios.min.js"></script> -->
<script src="/js/utilities/axios.js"></script>
<script src="/js/utilities/vue.js"></script>
<script>
    async function handleDeletePrint(e) {
        const id = e.target.id
        console.log(id)
        const url = '/api/v1/delete-job/'+id
        try {
            await axios.delete(url)
            location.reload()
        }
        catch(error) {
            console.error(error.toString())
            alert(error.toString())
        }
    }
</script>

<div class="PageTitle" style="margin-top: 80px;">Printers</div>

<div id="GantApp">

    <div class="HorizontalScrollingContainer" id="ScrollingContainer">
        
        <div class="TimeContainer">
            <!-- <div class="LeftColumnTitle"></div> -->
            <div class="TimeElement" v-for="time in timeline">
                <div class="Day">{{time.date}}</div>
                <div class="Time">{{time.time}}</div>
            </div>
        </div>
        
        <div class="Queue" v-for="printerQueue in computedPrinterQueues">
            <div class="LeftColumnTitle">{{printerQueue.device}}</div>
            <div class="Job" v-for="job in printerQueue.jobs" v-bind:class="job.priority" v-bind:style="{ width: job.widthPercentage, left: job.left}"></div>
            <div class="RightColumnOpacity"></div>
        </div>
        <div class="ScrollMargin"></div>
    </div>
    
    <div class="SlideContainer">
        <input type="range" class="Slider" min="1" max="6" step="1" v-model="sliderValue">
    </div>

    <div class="Legend">
        <div>
            <div class="Key" style="background-color: #F0AE1A;"></div>
            <div class="LegendText">Urgent</div>
        </div>
        <div>
            <div class="Key" style="background-color: #3B208B;"></div>
            <div class="LegendText">Private</div>
        </div>
    </div>

    <div class="Actions">
        <button class="GantAction">Printer Error</button>
        <button class="GantAction">Contact Author</button>
        <button class="GantAction">Request Slot</button>
        <button class="GantAction">Other Actions?</button>
    </div>
</div>

<script>
    new Vue({
        el: '#GantApp',
        data: {
            sliderValue: 1, //slider value is simply the number of hours for an interval.
            printerQueues: [
                {
                    device: 1,
                    jobs: [
                        {
                            duration: 5000,
                            date: Number(Date.now()/1000 + 1500),
                            priority: 'Job',
                        },
                        {
                            duration: 15000,
                            date: Number((Date.now()/1000) + 9500),
                            priority: 'Urgent',
                        },
                    ]
                },
                {
                    device: 2,
                    jobs: [
                        {
                            duration: 2000,
                            date: Number(Date.now()/1000 + 3000),
                            priority: 'Private',
                        },
                        {
                            duration: 19000,
                            date: Number(Date.now()/1000 + 15000),
                            priority: 'Job',
                        },
                    ]
                },
                {
                    device: 3,
                    jobs: [
                        {
                            duration: 5000,
                            date: Number(Date.now()/1000 + 6000),
                            priority: 'Job',
                        },
                        {
                            duration: 3000,
                            date: Number(Date.now()/1000 + 13000),
                            priority: 'Job',
                        },
                    ]
                }
            ],
            startTime: -1,
        },
        computed: {
            computedPrinterQueues: function() {
                const computedPrinterQueue = this.printerQueues;
                computedPrinterQueue.forEach(printerQueue => {
                    printerQueue.jobs.forEach(job => {
                        /*
                        - this.sliderValue is simply the time between intervals
                        - time elements are at 10% page width
                        - (job.duration in seconds) 
                        - ratio is this.sliderWidth per 10% -> this.sliderValue/.10

                        Percentage = (job.duration * 10%) / (this.sliderValue * 3600)
                        */
                        

                        job.widthPercentage = (job.duration * 10) / (this.sliderValue * 3600) + '%';
                        /*
                        - recalibrate left positioning
                        - left is referenced from start hard 
                        - pixels?
                        
                        */

                        
                        const startDate = new Date(0);
                        startDate.setUTCSeconds(this.startTime);
                        startDate.setHours(startDate.getHours());
                        startDate.setMinutes(0);
                        startDate.setSeconds(0);

                        
                        const sliderValueSeconds = Number(this.sliderValue)*3600;
                        const deltaTime = job.date - (startDate.getTime()/1000);
                        //deltaTime is number of seconds between now and job


                        //sliderValue is time interval
                        const deltaTimeInHours = deltaTime/3600; //3600 seconds in an hour


                        
                        const distanceFromLocalHour = (deltaTimeInHours*10)/Number(this.sliderValue);
                        // console.log('distanceFromLocalHour %: ' + distanceFromLocalHour);
                        job.left = distanceFromLocalHour+'%';
                    });
                });
                return computedPrinterQueue;
            },
            timeline: function() {
                /*
                important that this accomdates css flex
                starting with 2 hour intervals. width between time stamps is defined by a percentage number
                */

                var dateForTimeElement = new Date();

                const dayString = ["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"];

                const currentHour = (new Date()).getHours();
                const currentSeconds = Date.now()/1000; //seems to be millis
                this.startTime = currentSeconds;
                var endDateSeconds = currentSeconds;
                this.printerQueues.forEach(printerQueue => {
                    printerQueue.jobs.forEach(job => {
                        const jobEndSeconds = Number(job.duration) + Number(job.date);
                        if (jobEndSeconds > endDateSeconds) {
                            endDateSeconds = jobEndSeconds;
                        }
                    });
                });


                const timelineDurationSeconds = (endDateSeconds - currentSeconds);

                /* if timelineDurationSeconds < full page of time
                    add appropriate # hours
                */

                // const timelineNumberOfHours = (endDateSeconds - currentSeconds)/(this.sliderValue*3600);


                var timelineObject = [];
                timelineObject.push({
                    time: currentHour,
                    date: ""
                }); 
                /*
                timelineObject = [
                    22,
                    23,
                    0,
                    1,
                ]
                */

                //should always have enough hours for one day?, but more hours when needed. Width of spacing between times is to be predefined
                
                var i = 1;
                var sumTime = 0;

                while ( i <= 11 || sumTime <= timelineDurationSeconds ) {
                    sumTime += Number(this.sliderValue) * 3600;
                    const lastNumber = timelineObject[timelineObject.length-1].time;
                    const tentativeNextNumber = Number(lastNumber) + Number(this.sliderValue);

                    if (tentativeNextNumber >= 24) {
                        //add day here
                        timelineObject.push({
                            time: Number(tentativeNextNumber-24),
                            date: dayString[dateForTimeElement.getDay()] + " " + dateForTimeElement.getDate()
                        });
                        dateForTimeElement.setDate(dateForTimeElement.getDate() + 1);
                    }
                    else {
                        timelineObject.push({
                            time: tentativeNextNumber,
                            date: (i == 1) ? (dayString[dateForTimeElement.getDay()] + " " + dateForTimeElement.getDate()) : ""
                        });
                        if (i == 1) { 
                            dateForTimeElement.setDate(dateForTimeElement.getDate() + 1);
                        }
                    }
                    i++;
                }

                timelineObject = timelineObject.map(numObj => {
                    return {
                        time: (numObj.time < 10) ? ('0' + numObj.time + ':00') : (''+ numObj.time + ':00'),
                        date: numObj.date
                    }
                });

                //remove first time for clarity (temporarily for testing)
                timelineObject[0] = {};

                return timelineObject;
            },
        },
    });
</script>